Description: Template for server components of Udagram
Parameters: 
  EnvironmentName:
    Description: An environment name that will be prefixed to resources
    Type: String
  AMItoUse:
    Description: Ubuntu 18.04 LTS image to use for the EC2 instances (web servers)
    Type: String
  EC2InstanceType:
    Description: Instance type of the EC2 instances (web servers)
    Type: String
  EC2EBSVolume:
    Description: Volume size of the EC2 EBS
    Type: Number
  LaunchConfigMaxSize:
    Type: String
  LaunchConfigMinSize:
    Type: String
  LaunchConfigDesiredSize:
    Type: String
  S3ARN:
    Description: ARN for S3 bucket
    Type: String
  S3Bucket:
    Description: S3 bucket containing web files
    Type: String
  
Resources:
  # IAM Role to allow EC2 Session Manager to access the private servers
  RoleForSSMAccess:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  
  RoleForS3Access:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: ec2s3access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Ref S3ARN
              - Effect: Allow
                Action: [s3:GetObject, s3:PutObject]
                Resource: !Sub ${S3ARN}/*
                
  # InstanceProfile to allow passing the IAM roles to private servers
  ServerInstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        #- !Ref RoleForSSMAccess
        - !Ref RoleForS3Access

  # Security Groups
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to and from the loadbalancer on port 80 only 
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LBSecGroup
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTP to the webservers from the loadbalancer only 
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServerSecGroup
  
  # Launch configuration for autoscaling the webservers
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: WebServerSecGroup
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          
          # install aws cli on ubuntu
          apt install awscli -y

          # install and start apache server
          apt-get install apache2 -y
          systemctl start apache2.service

          # copy web files from s3 bucket
          aws s3 sync ${S3Bucket} /var/www/html
          
          # Placeholder for the home page
          #echo "It works! Udagram, Udacity" > index.html
      ImageId: !Ref AMItoUse
      SecurityGroups: 
        - !Ref WebServerSecGroup
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref ServerInstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: !Ref EC2EBSVolume
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-Private-SN"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MaxSize: !Ref LaunchConfigMaxSize
      MinSize: !Ref LaunchConfigMinSize
      DesiredCapacity: !Ref LaunchConfigDesiredSize
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Autoscaling Group
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
  
  # Loadbalancer configuration
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
  
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      SecurityGroups: 
        - !Ref LBSecGroup
      Subnets: 
        - Fn::ImportValue: !Sub ${EnvironmentName}-Public1-SN
        - Fn::ImportValue: !Sub ${EnvironmentName}-Public2-SN
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          !Ref WebAppTargetGroup
      LoadBalancerArn:
        !Ref WebAppLB
      Port: 80
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

Outputs:
  WebsiteURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebAppLB
          - DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNSName
  
  